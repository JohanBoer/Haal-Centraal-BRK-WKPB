# coding: utf-8

"""
    Kadaster - Publiekrechtelijke beperkingen

    De definitie van de Publiekrechtelijke beperkingen endpoints en components.   # noqa: E501

    The version of the OpenAPI document: 1.3.0
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openapi_client.configuration import Configuration


class Beperkingsgebied(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'bag_object_identificatie': 'list[str]',
        'bgt_object_identificatie': 'list[str]',
        'kadastraal_onroerende_zaak_identificaties': 'list[str]',
        'vrije_contour': 'VrijeContour'
    }

    attribute_map = {
        'bag_object_identificatie': 'bagObjectIdentificatie',
        'bgt_object_identificatie': 'bgtObjectIdentificatie',
        'kadastraal_onroerende_zaak_identificaties': 'kadastraalOnroerendeZaakIdentificaties',
        'vrije_contour': 'vrijeContour'
    }

    def __init__(self, bag_object_identificatie=None, bgt_object_identificatie=None, kadastraal_onroerende_zaak_identificaties=None, vrije_contour=None, local_vars_configuration=None):  # noqa: E501
        """Beperkingsgebied - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._bag_object_identificatie = None
        self._bgt_object_identificatie = None
        self._kadastraal_onroerende_zaak_identificaties = None
        self._vrije_contour = None
        self.discriminator = None

        if bag_object_identificatie is not None:
            self.bag_object_identificatie = bag_object_identificatie
        if bgt_object_identificatie is not None:
            self.bgt_object_identificatie = bgt_object_identificatie
        if kadastraal_onroerende_zaak_identificaties is not None:
            self.kadastraal_onroerende_zaak_identificaties = kadastraal_onroerende_zaak_identificaties
        if vrije_contour is not None:
            self.vrije_contour = vrije_contour

    @property
    def bag_object_identificatie(self):
        """Gets the bag_object_identificatie of this Beperkingsgebied.  # noqa: E501


        :return: The bag_object_identificatie of this Beperkingsgebied.  # noqa: E501
        :rtype: list[str]
        """
        return self._bag_object_identificatie

    @bag_object_identificatie.setter
    def bag_object_identificatie(self, bag_object_identificatie):
        """Sets the bag_object_identificatie of this Beperkingsgebied.


        :param bag_object_identificatie: The bag_object_identificatie of this Beperkingsgebied.  # noqa: E501
        :type: list[str]
        """

        self._bag_object_identificatie = bag_object_identificatie

    @property
    def bgt_object_identificatie(self):
        """Gets the bgt_object_identificatie of this Beperkingsgebied.  # noqa: E501


        :return: The bgt_object_identificatie of this Beperkingsgebied.  # noqa: E501
        :rtype: list[str]
        """
        return self._bgt_object_identificatie

    @bgt_object_identificatie.setter
    def bgt_object_identificatie(self, bgt_object_identificatie):
        """Sets the bgt_object_identificatie of this Beperkingsgebied.


        :param bgt_object_identificatie: The bgt_object_identificatie of this Beperkingsgebied.  # noqa: E501
        :type: list[str]
        """

        self._bgt_object_identificatie = bgt_object_identificatie

    @property
    def kadastraal_onroerende_zaak_identificaties(self):
        """Gets the kadastraal_onroerende_zaak_identificaties of this Beperkingsgebied.  # noqa: E501


        :return: The kadastraal_onroerende_zaak_identificaties of this Beperkingsgebied.  # noqa: E501
        :rtype: list[str]
        """
        return self._kadastraal_onroerende_zaak_identificaties

    @kadastraal_onroerende_zaak_identificaties.setter
    def kadastraal_onroerende_zaak_identificaties(self, kadastraal_onroerende_zaak_identificaties):
        """Sets the kadastraal_onroerende_zaak_identificaties of this Beperkingsgebied.


        :param kadastraal_onroerende_zaak_identificaties: The kadastraal_onroerende_zaak_identificaties of this Beperkingsgebied.  # noqa: E501
        :type: list[str]
        """

        self._kadastraal_onroerende_zaak_identificaties = kadastraal_onroerende_zaak_identificaties

    @property
    def vrije_contour(self):
        """Gets the vrije_contour of this Beperkingsgebied.  # noqa: E501


        :return: The vrije_contour of this Beperkingsgebied.  # noqa: E501
        :rtype: VrijeContour
        """
        return self._vrije_contour

    @vrije_contour.setter
    def vrije_contour(self, vrije_contour):
        """Sets the vrije_contour of this Beperkingsgebied.


        :param vrije_contour: The vrije_contour of this Beperkingsgebied.  # noqa: E501
        :type: VrijeContour
        """

        self._vrije_contour = vrije_contour

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Beperkingsgebied):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, Beperkingsgebied):
            return True

        return self.to_dict() != other.to_dict()
